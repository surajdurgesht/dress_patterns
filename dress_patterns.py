# -*- coding: utf-8 -*-
"""dress_patterns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17WroWwGe4qY9WMcompf5zk-qwzOaJdk1
"""

import pandas as pd
from PIL import Image
import requests
from io import BytesIO
from os import path
import seaborn as sns
import matplotlib.pyplot as plt

file = open("D:\Competition\GreenDeck\sample\\dress_patterns.csv")
#print(file.read())

ufo = pd.read_csv(file)
#ufo.head()
pd.DataFrame(ufo)

ufo.shape

ufo.drop('_unit_id', axis=1, inplace=True)
ufo.head()

ufo.shape

ufo['category'].value_counts()

#gb = df.groups
#df.describe()

#df.image_url
#df.category

#d = ufo.groupby(['category','image_url']).count()
#print(d)

#print(type(d))

#m = pd.DataFrame(d)
#print(m.category)
#var = m['category']== 'OTHER'"""

#m.stars
#m = ufo['image_url'].value_counts()
#m
#ufo.category[ufo.category == "plain" ]

#result = ufo.loc['plain', 'image_url']


category_count = ufo['category'].value_counts()
sns.set(style="darkgrid")
sns.barplot(category_count.index, category_count.values, alpha=0.9)
plt.title('Frequency Distribution of category')
plt.ylabel('Number of Occurrences', fontsize=12)
plt.xlabel('category', fontsize=12)
plt.xticks(rotation=45)
plt.savefig( "D:\Competition\GreenDeck\sample\\test.png")
plt.show()

f = ['plain', 'floral','stripes','polka dot','OTHER','tribal','squares','ikat','animal','geometry','cartoon','scales','chevron','letter_numb','houndstooth','stars','skull']

df1 = ufo.groupby(['category']).get_group(f[0])
df2 = ufo.groupby(['category']).get_group(f[1])
df3 = ufo.groupby(['category']).get_group(f[2])
df4 = ufo.groupby(['category']).get_group(f[3])
df5 = ufo.groupby(['category']).get_group(f[4])
df6 = ufo.groupby(['category']).get_group(f[5])
df7 = ufo.groupby(['category']).get_group(f[6])
df8 = ufo.groupby(['category']).get_group(f[7])
df9 = ufo.groupby(['category']).get_group(f[8])
df10 = ufo.groupby(['category']).get_group(f[9])
df11 = ufo.groupby(['category']).get_group(f[10])
df12 = ufo.groupby(['category']).get_group(f[11])
df13 = ufo.groupby(['category']).get_group(f[12])
df14 = ufo.groupby(['category']).get_group(f[13])
df15 = ufo.groupby(['category']).get_group(f[14])
df16 = ufo.groupby(['category']).get_group(f[15])
df17 = ufo.groupby(['category']).get_group(f[16])

df = [df1, df2, df3, df4, df5, df6, df7, df7, df8, df9, df10, df11, df12, df13, df14, df15, df16, df17]
print(df)

import os
newpath = r'D:\Competition\GreenDeck\sample\\train' 
if not os.path.exists(newpath):
    os.makedirs(newpath)

i = 0
while(i < 17):
    path_train = r'D:\Competition\GreenDeck\sample\\train\\' + f[i]
    if not os.path.exists(path_train):
        os.makedirs(path_train)
    i = i + 1

newpath = r'D:\Competition\GreenDeck\sample\\test' 
if not os.path.exists(newpath):
    os.makedirs(newpath)
    
i = 0
while(i < 17):
    path_test = r'D:\Competition\GreenDeck\sample\\test\\' + f[i]
    if not os.path.exists(path_test):
        os.makedirs(path_test)
    i = i + 1



for i in list(range(len(df)-1)): #len(df)-1
           
    outpath_train = 'D:\Competition\GreenDeck\sample\\train\\' + f[i] + '\\'
    outpath_test = 'D:\Competition\GreenDeck\sample\\test\\' + f[i] + '\\'
        
    url = df[i].image_url.values
    count = 0
    while(count < len(df[i].image_url)):
        if(count < round(len(df[i].image_url) * 0.7)):
                            
            count = count + 1
            response = requests.get(url[count])
            img1 = Image.open(BytesIO(response.content))
            plt.imshow(img1)
            plt.savefig(outpath_train + '{0}.jpg'.format(count))
            plt.show()
            print("task complete")
            print(count)
        else:
            count = count + 1
            if(count == len(df[i].image_url) ):
                break
            else:
                response = requests.get(url[count])
                img1 = Image.open(BytesIO(response.content))
                plt.imshow(img1)
                plt.savefig(outpath_test + '{0}.jpg'.format(count))
                plt.show()
                print(count)
        





"""
df.shape
url = df.image_url
m = url.values
m[1]
url.shape[0]

1.   skull  14
2.   stars 32
3.   houndstooth 47
4.   letter_numb 58
5.   chevorn 68
6.   scales 79
7.   cartoon 183
8.   geometry 240
9.   animal 247
10. ikat 249
11.  squares 308 
12. tribal 355
13.  OTHER  360
14. polka dot 456
15. stripes 491
16. floral 1944

10. plain          8385
11. floral         2776




df = ufo.groupby(['category']).get_group('floral')
m = df.image_url
url = m.values

count = 0


# while (count < 3):     #url.shape[0]
#     count = count + 1
#     response = requests.get(url[count])
#     img1 = Image.open(BytesIO(response.content))
#     img = image.img_to_array(img1)
#     img = img/255
#     train_images.append(img)
#     #print( train_images)
#     plt.imshow(img1)
#     plt.show()
   
# X = np.array(train_images)



outpath_train = 'D:\\GreenDeck\\train\\'
outpath_test = 'D:\\GreenDeck\\test\\'

while(count < url.shape[0]):
  if(count < 1944):                   
    count = count + 1
    response = requests.get(url[count])
    img1 = Image.open(BytesIO(response.content))
    #img = image.img_to_array(img1)
    #img = img/255
    #train_images.append(img)
    #print( train_images)
    plt.imshow(img1)
    plt.savefig(outpath_train + '{0}.jpg'.format(count))
    plt.show()
    print("task complete")
    print(count)
  else:
    count = count + 1
    if(count == url.shape[0] ):               
      break
    else:
      response = requests.get(url[count])
      img1 = Image.open(BytesIO(response.content))
      #img = image.img_to_array(img1)
      #img = img/255
      #train_data_dir.append(img)
      #print(train_data_dir)
      plt.imshow(img1)
      plt.savefig(outpath_test + '{0}.jpg'.format(count))
      plt.show()
      print(count)
    
#X_trained = np.array(train_images)
#X_tested = np.array(train_data_dir)
      
      """
